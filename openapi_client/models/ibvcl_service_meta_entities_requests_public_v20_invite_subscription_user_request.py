# coding: utf-8

"""
    Collaboard Public Web API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.ibvcl_service_meta_entities_requests_public_v20_invite_subscription_user_item import IBVCLServiceMetaEntitiesRequestsPublicV20InviteSubscriptionUserItem
from typing import Optional, Set
from typing_extensions import Self

class IBVCLServiceMetaEntitiesRequestsPublicV20InviteSubscriptionUserRequest(BaseModel):
    """
    IBVCLServiceMetaEntitiesRequestsPublicV20InviteSubscriptionUserRequest
    """ # noqa: E501
    unique_device_id: Optional[StrictStr] = Field(default=None, alias="uniqueDeviceId")
    invitation_accept_url: Optional[StrictStr] = Field(default=None, alias="invitationAcceptUrl")
    invitation_reject_url: Optional[StrictStr] = Field(default=None, alias="invitationRejectUrl")
    message_theme: Optional[StrictStr] = Field(default=None, alias="messageTheme")
    user: Optional[IBVCLServiceMetaEntitiesRequestsPublicV20InviteSubscriptionUserItem] = None
    __properties: ClassVar[List[str]] = ["uniqueDeviceId", "invitationAcceptUrl", "invitationRejectUrl", "messageTheme", "user"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IBVCLServiceMetaEntitiesRequestsPublicV20InviteSubscriptionUserRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # set to None if invitation_accept_url (nullable) is None
        # and model_fields_set contains the field
        if self.invitation_accept_url is None and "invitation_accept_url" in self.model_fields_set:
            _dict['invitationAcceptUrl'] = None

        # set to None if invitation_reject_url (nullable) is None
        # and model_fields_set contains the field
        if self.invitation_reject_url is None and "invitation_reject_url" in self.model_fields_set:
            _dict['invitationRejectUrl'] = None

        # set to None if message_theme (nullable) is None
        # and model_fields_set contains the field
        if self.message_theme is None and "message_theme" in self.model_fields_set:
            _dict['messageTheme'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IBVCLServiceMetaEntitiesRequestsPublicV20InviteSubscriptionUserRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uniqueDeviceId": obj.get("uniqueDeviceId"),
            "invitationAcceptUrl": obj.get("invitationAcceptUrl"),
            "invitationRejectUrl": obj.get("invitationRejectUrl"),
            "messageTheme": obj.get("messageTheme"),
            "user": IBVCLServiceMetaEntitiesRequestsPublicV20InviteSubscriptionUserItem.from_dict(obj["user"]) if obj.get("user") is not None else None
        })
        return _obj


