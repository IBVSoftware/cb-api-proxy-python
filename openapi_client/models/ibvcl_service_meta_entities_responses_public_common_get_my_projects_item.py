# coding: utf-8

"""
    Collaboard Public Web API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.ibvcl_service_meta_entities_project_participant_permission_enum import IBVCLServiceMetaEntitiesProjectParticipantPermissionEnum
from openapi_client.models.ibvcl_service_meta_entities_responses_public_common_project import IBVCLServiceMetaEntitiesResponsesPublicCommonProject
from typing import Optional, Set
from typing_extensions import Self

class IBVCLServiceMetaEntitiesResponsesPublicCommonGetMyProjectsItem(BaseModel):
    """
    IBVCLServiceMetaEntitiesResponsesPublicCommonGetMyProjectsItem
    """ # noqa: E501
    project: Optional[IBVCLServiceMetaEntitiesResponsesPublicCommonProject] = None
    thumbnail_url: Optional[StrictStr] = Field(default=None, alias="thumbnailUrl")
    permission: Optional[IBVCLServiceMetaEntitiesProjectParticipantPermissionEnum] = None
    is_licensed: Optional[StrictBool] = Field(default=None, alias="isLicensed")
    last_access_date: Optional[datetime] = Field(default=None, alias="lastAccessDate")
    number_of_participants: Optional[StrictInt] = Field(default=None, alias="numberOfParticipants")
    __properties: ClassVar[List[str]] = ["project", "thumbnailUrl", "permission", "isLicensed", "lastAccessDate", "numberOfParticipants"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IBVCLServiceMetaEntitiesResponsesPublicCommonGetMyProjectsItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of project
        if self.project:
            _dict['project'] = self.project.to_dict()
        # set to None if thumbnail_url (nullable) is None
        # and model_fields_set contains the field
        if self.thumbnail_url is None and "thumbnail_url" in self.model_fields_set:
            _dict['thumbnailUrl'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IBVCLServiceMetaEntitiesResponsesPublicCommonGetMyProjectsItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "project": IBVCLServiceMetaEntitiesResponsesPublicCommonProject.from_dict(obj["project"]) if obj.get("project") is not None else None,
            "thumbnailUrl": obj.get("thumbnailUrl"),
            "permission": obj.get("permission"),
            "isLicensed": obj.get("isLicensed"),
            "lastAccessDate": obj.get("lastAccessDate"),
            "numberOfParticipants": obj.get("numberOfParticipants")
        })
        return _obj


